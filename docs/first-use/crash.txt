.. highlight:: sh

========================
Crash, The CrateDB Shell
========================

The CrateDB Shell (aka `Crash`_) is shipped with the tarball distribution.

Start the shell like so::

  sh$ ./bin/crash

.. NOTE::

   If you prefer a browser-based experience, you can run these same commands
   from the *Console* tab in the `the CrateDB admin UI`_.

.. highlight:: psql

First let's connect to a running node::

    cr> \connect 127.0.0.1:4200;
    +------------------------+-----------+---------+-----------+---------+
    | server_url             | node_name | version | connected | message |
    +------------------------+-----------+---------+-----------+---------+
    | http://127.0.0.1:...   | crate     | ...     | TRUE      | OK      |
    +------------------------+-----------+---------+-----------+---------+

Let's say we want to create a database for Twitter_ tweets.

.. NOTE::

   If you followed the instructions in the :ref:`Import Sample Data <import>`
   document, you will already have the ``tweets`` table created and populated
   with sample data.

We can start by creating the ``tweets`` table::

    cr> CREATE TABLE tweets (
    ...   created_at timestamp,
    ...   id string primary key,
    ...   retweeted boolean,
    ...   source string INDEX using fulltext,
    ...   text string INDEX using fulltext,
    ...   user_id string
    ... );
    CREATE OK, 1 row affected (... sec)

Now we are ready to insert our first tweet::

    cr> INSERT INTO tweets
    ...      VALUES (
    ...        1394182937,
    ...        '1',
    ...        true,
    ...        'web',
    ...        'Don''t panic',
    ...        'Douglas'
    ...      );
    INSERT OK, 1 row affected (... sec)

And another::

    cr> INSERT INTO tweets
    ...      VALUES (
    ...        1394182938,
    ...        '2',
    ...        true,
    ...        'web',
    ...        'Time is an illusion. Lunchtime doubly so',
    ...        'Ford'
    ...      );
    INSERT OK, 1 row affected (... sec)

To query the inserted tweets, a ``SELECT`` statement can be used.

If we only wanted Ford's tweets, we could run::

    cr> SELECT * FROM tweets WHERE id = '2';
    +------------+----+-----------+--------+-------------------------...-+---------+
    | created_at | id | retweeted | source | text                        | user_id |
    +------------+----+-----------+--------+-------------------------...-+---------+
    | 1394182938 | 2  | TRUE      | web    | Time is an illusion. Lun... | Ford    |
    +------------+----+-----------+--------+-------------------------...-+---------+
    SELECT 1 row in set (... sec)

.. SEEALSO::

   `Data Definition
   <https://crate.io/docs/crate/reference/sql/ddl/index.html>`_ - To see what
   options the create table statement supports and to learn more about sharding
   and replication.

   `Data Manipulation <https://crate.io/docs/crate/reference/sql/dml.html>`_ -
   In order to learn how to import, export, insert, update or delete records.

   `Querying CrateDB <https://crate.io/docs/crate/reference/sql/dql.html>`_ -
   Filtering, ordering, grouping and powerful fulltext search. Learn how to
   find your data.

   `Configuration <https://crate.io/docs/crate/reference/configuration.html>`_
   - After you're done trying out CrateDB and before you go into production you
   should take a look at this section. Especially the ``CRATE_HEAP_SIZE``
   environment variable is very important!

.. rubric:: Next Steps

- :doc:`Start Building <../start-building/index>`

.. _Crash: https://crate.io/docs/clients/crash/en/latest/
.. _the CrateDB admin UI: https://crate.io/docs/connect/admin_ui/
.. _SQL: https://en.wikipedia.org/wiki/SQL
.. _Twitter: https://twitter.com
